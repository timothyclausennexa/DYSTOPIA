name: DYSTOPIA Test Suite

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]

jobs:
  test:
    name: Run Complete Test Suite
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 🔥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📚 Install pnpm
        run: npm install -g pnpm

      - name: 📥 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🧪 Run Test Suite
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
        run: |
          chmod +x scripts/test.sh
          ./scripts/test.sh

      - name: 📊 Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            server/logs/
            test-results/

      - name: 💬 Comment Test Results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const testPassed = ${{ job.status == 'success' }};
            const body = testPassed
              ? '✅ **All tests passed!** DYSTOPIA is ready for battle.'
              : '❌ **Tests failed!** Please review the errors above.';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
      - name: 🔥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 📚 Install pnpm
        run: npm install -g pnpm

      - name: 📥 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Run Linter
        run: pnpm lint

  typecheck:
    name: Type Check
    runs-on: ubuntu-latest

    steps:
      - name: 🔥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 📚 Install pnpm
        run: npm install -g pnpm

      - name: 📥 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Type Check Server
        run: cd server && pnpm typecheck

  build:
    name: Build Project
    runs-on: ubuntu-latest
    needs: [test, lint, typecheck]

    steps:
      - name: 🔥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 📚 Install pnpm
        run: npm install -g pnpm

      - name: 📥 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build Project
        run: pnpm build

      - name: 📦 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: |
            server/dist/
            client/dist/

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: 🔥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build

      - name: 🚀 Deploy
        run: |
          echo "🔥 DYSTOPIA: Deployment would happen here"
          echo "Configure your deployment strategy (PM2, Docker, etc.)"
          # Add your deployment commands here
          # Example: ./scripts/deploy.sh
